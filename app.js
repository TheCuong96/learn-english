// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
let currentTopic = 'daily';
let learnedWords = JSON.parse(localStorage.getItem('learnedWords')) || [];
let todayLearnedWords = JSON.parse(localStorage.getItem('todayLearnedWords')) || [];
let lastLearningDate = localStorage.getItem('lastLearningDate') || '';
let learningStreak = parseInt(localStorage.getItem('learningStreak')) || 0;

// Ki·ªÉm tra v√† c·∫≠p nh·∫≠t ng√†y h·ªçc
function checkDailyReset() {
    const today = new Date().toDateString();
    if (lastLearningDate !== today) {
        // N·∫øu l√† ng√†y m·ªõi
        if (lastLearningDate && new Date(lastLearningDate).toDateString() === 
            new Date(Date.now() - 86400000).toDateString()) {
            // N·∫øu h·ªçc ng√†y h√¥m qua, tƒÉng streak
            learningStreak++;
        } else if (lastLearningDate) {
            // N·∫øu b·ªè qua ng√†y, reset streak
            learningStreak = 0;
        }
        todayLearnedWords = [];
        lastLearningDate = today;
        saveLearningData();
    }
}

// L∆∞u d·ªØ li·ªáu h·ªçc t·∫≠p
function saveLearningData() {
    localStorage.setItem('learnedWords', JSON.stringify(learnedWords));
    localStorage.setItem('todayLearnedWords', JSON.stringify(todayLearnedWords));
    localStorage.setItem('lastLearningDate', lastLearningDate);
    localStorage.setItem('learningStreak', learningStreak);
}

// C·∫≠p nh·∫≠t th·ªëng k√™
function updateStats() {
    document.getElementById('wordsLearned').textContent = todayLearnedWords.length;
    document.getElementById('totalWords').textContent = learnedWords.length;
    document.getElementById('streak').textContent = learningStreak;
}

// T·∫°o card t·ª´ v·ª±ng
function createWordCard(word, index) {
    const isLearned = learnedWords.includes(word.word);
    const cardHtml = `
        <div class="word-card ${isLearned ? 'learned' : ''}" data-word="${word.word}">
            <div class="word-header">
                <h3 class="word">${word.word}</h3>
                <button class="pronunciation-btn" onclick="speakWord('${word.word}')" title="Nghe ph√°t √¢m">
                    üîä
                </button>
            </div>
            <p class="ipa">${word.ipa}</p>
            <p class="meaning">Nghƒ©a: ${word.meaning}</p>
            <div class="example">
                <p class="example-en">${word.example.en}</p>
                <p class="example-vi">${word.example.vi}</p>
            </div>
            <span class="word-type">${word.type}</span>
            <button class="mark-learned-btn ${isLearned ? 'learned' : ''}" 
                    onclick="toggleLearnedStatus('${word.word}')"
                    ${isLearned ? 'disabled' : ''}>
                ${isLearned ? '‚úì ƒê√£ h·ªçc' : 'ƒê√°nh d·∫•u ƒë√£ h·ªçc'}
            </button>
        </div>
    `;
    return cardHtml;
}

// Hi·ªÉn th·ªã t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ
function displayVocabulary(topic) {
    const content = document.getElementById('content');
    const topicData = vocabularyData[topic];
    
    if (!topicData) {
        content.innerHTML = '<p class="loading">Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ n√†y.</p>';
        return;
    }
    
    let html = '';
    
    if (topic === 'daily') {
        html += `
            <div class="daily-summary">
                <h2>${topicData.title}</h2>
                <p>${topicData.description}</p>
                <p>Ng√†y ${new Date().toLocaleDateString('vi-VN')}</p>
            </div>
        `;
    } else {
        html += `
            <h2 style="text-align: center; color: #667eea; margin-bottom: 20px;">
                ${topicData.title}
            </h2>
            <p style="text-align: center; color: #666; margin-bottom: 30px;">
                ${topicData.description}
            </p>
        `;
    }
    
    html += '<div class="vocabulary-grid">';
    topicData.words.forEach((word, index) => {
        html += createWordCard(word, index);
    });
    html += '</div>';
    
    content.innerHTML = html;
}

// Ph√°t √¢m t·ª´ s·ª≠ d·ª•ng Web Speech API
function speakWord(word) {
    if ('speechSynthesis' in window) {
        // H·ªßy b·∫•t k·ª≥ ph√°t √¢m n√†o ƒëang ch·∫°y
        window.speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(word);
        utterance.lang = 'en-US';
        utterance.rate = 0.8; // T·ªëc ƒë·ªô n√≥i ch·∫≠m h∆°n m·ªôt ch√∫t
        utterance.pitch = 1;
        utterance.volume = 1;
        
        // Th√™m hi·ªáu ·ª©ng visual khi ƒëang ph√°t √¢m
        const button = event.target;
        button.style.transform = 'scale(0.95)';
        
        utterance.onend = () => {
            button.style.transform = 'scale(1)';
        };
        
        window.speechSynthesis.speak(utterance);
    } else {
        alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t √¢m. Vui l√≤ng s·ª≠ d·ª•ng Chrome, Firefox ho·∫∑c Safari.');
    }
}

// ƒê√°nh d·∫•u t·ª´ ƒë√£ h·ªçc
function toggleLearnedStatus(word) {
    if (!learnedWords.includes(word)) {
        learnedWords.push(word);
        if (!todayLearnedWords.includes(word)) {
            todayLearnedWords.push(word);
        }
        saveLearningData();
        
        // C·∫≠p nh·∫≠t UI
        const wordCard = document.querySelector(`[data-word="${word}"]`);
        if (wordCard) {
            wordCard.classList.add('learned');
            const button = wordCard.querySelector('.mark-learned-btn');
            button.textContent = '‚úì ƒê√£ h·ªçc';
            button.classList.add('learned');
            button.disabled = true;
        }
        
        updateStats();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        showNotification(`Tuy·ªát v·ªùi! B·∫°n ƒë√£ h·ªçc t·ª´ "${word}"`);
    }
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4caf50;
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-out';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// X·ª≠ l√Ω s·ª± ki·ªán click ch·ªß ƒë·ªÅ
document.addEventListener('DOMContentLoaded', () => {
    checkDailyReset();
    updateStats();
    displayVocabulary(currentTopic);
    
    // Th√™m s·ª± ki·ªán cho c√°c n√∫t ch·ªß ƒë·ªÅ
    const topicButtons = document.querySelectorAll('.topic-btn');
    topicButtons.forEach(button => {
        button.addEventListener('click', () => {
            // X√≥a active t·ª´ t·∫•t c·∫£ c√°c n√∫t
            topicButtons.forEach(btn => btn.classList.remove('active'));
            // Th√™m active cho n√∫t ƒë∆∞·ª£c click
            button.classList.add('active');
            // Hi·ªÉn th·ªã t·ª´ v·ª±ng c·ªßa ch·ªß ƒë·ªÅ
            currentTopic = button.dataset.topic;
            displayVocabulary(currentTopic);
        });
    });
    
    // T·ª± ƒë·ªông ph√°t √¢m khi hover (optional)
    document.addEventListener('mouseover', (e) => {
        if (e.target.classList.contains('word') && e.shiftKey) {
            const word = e.target.textContent;
            speakWord(word);
        }
    });
});

// Th√™m CSS animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);